{"remainingRequest":"/home/asahu/Projects/vue/weather_forecast_app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/asahu/Projects/vue/weather_forecast_app/src/components/CurrentWeather.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/asahu/Projects/vue/weather_forecast_app/src/components/CurrentWeather.vue","mtime":1635156663720},{"path":"/home/asahu/Projects/vue/weather_forecast_app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/asahu/Projects/vue/weather_forecast_app/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/asahu/Projects/vue/weather_forecast_app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/asahu/Projects/vue/weather_forecast_app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCBXZWF0aGVySWNvbiBmcm9tICcuL1dlYXRoZXJJY29uLnZ1ZScKaW1wb3J0IEN1cnJlbnRTdGF0cyBmcm9tICcuL0N1cnJlbnRTdGF0cy52dWUnCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0N1cnJlbnRXZWF0aGVyJywKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgLy8gU2VhcmNoIEJhcgogICAgICBzZWFyY2hCYXI6IG51bGwsCiAgICAgIGNpdHk6IG51bGwsCiAgICAgIC8vIExvY2F0aW9uIEdlb3RhZ2luZwogICAgICBsb2NhdGlvbjogbnVsbCwKICAgICAgZXJyb3JTdHI6IG51bGwsCiAgICAgIGxhdGl0dWRlOiAwLAogICAgICBsb25naXR1ZGU6IDAsCiAgICAgIC8vIE9wZW4gV2VhdGhlcgogICAgICBhcGlLZXk6ICdmZGEzZTk4OTY3NzI2MGE0Mzg5Mjk5NmI2Mjk3N2VhMycsCiAgICAgIHdlYXRoZXI6IFtdLAogICAgICBhbGxXZWF0aGVyOiBbXSwKICAgICAgdGltZXN0YW1wOiBudWxsLAogICAgICB0ZW1wOiBudWxsLAogICAgfQogIH0sCiAgY29tcG9uZW50czogewogICAgV2VhdGhlckljb24sCiAgICBDdXJyZW50U3RhdHMsCiAgfSwKICBjcmVhdGVkKCkgewogICAgdGhpcy5sYXRpdHVkZSA9IHRoaXMuJGNvb2tpZXMuZ2V0KCdsYXRpdHVkZScpOwogICAgdGhpcy5sb25naXR1ZGUgPSB0aGlzLiRjb29raWVzLmdldCgnbG9uZ2l0dWRlJyk7CiAgICBjb25zb2xlLmxvZyh0aGlzLmxvbmdpdHVkZSkKICAgIGlmICh0aGlzLmxvbmdpdHVkZSA9PSAwKSB7CiAgICAgIC8vIExvY2F0aW9uIEdlb3RhZ2luZyAmIENvb2tpZXMKICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihwb3MgPT4gewogICAgICAgIHRoaXMubG9jYXRpb24gPSBwb3M7CiAgICAgICAgdGhpcy5sYXRpdHVkZSA9IHRoaXMubG9jYXRpb24uY29vcmRzLmxhdGl0dWRlOwogICAgICAgIHRoaXMubG9uZ2l0dWRlID0gdGhpcy5sb2NhdGlvbi5jb29yZHMubG9uZ2l0dWRlOwogICAgICAgIHRoaXMuZ2V0Q2l0eSgpCiAgICAgIH0sIGVyciA9PiB7CiAgICAgICAgdGhpcy5lcnJvclN0ciA9IGVyci5tZXNzYWdlOwogICAgICB9KQogICAgfSBlbHNlIHsKICAgICAgdGhpcy5nZXRDaXR5KCkKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGFzeW5jIHNlYXJjaENpdHkoKSB7CiAgICAgIHRoaXMuY2l0eSA9IHRoaXMuc2VhcmNoQmFyOwogICAgICAvLyBHZXQgQ2l0eSBDb29yZGluYXRlcwogICAgICBheGlvcy5nZXQoJ2h0dHA6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L3dlYXRoZXI/cT0nKyB0aGlzLmNpdHkgKycmYXBwaWQ9JyArIHRoaXMuYXBpS2V5KQogICAgICAudGhlbihyZXNwb25zZSA9PiAoCiAgICAgICAgdGhpcy53ZWF0aGVyID0gcmVzcG9uc2UuZGF0YSwKICAgICAgICB0aGlzLmxhdGl0dWRlID0gdGhpcy53ZWF0aGVyWydjb29yZCddWydsYXQnXSwKICAgICAgICB0aGlzLmxvbmdpdHVkZSA9IHRoaXMud2VhdGhlclsnY29vcmQnXVsnbG9uJ10sCiAgICAgICAgdGhpcy5nZXRXZWF0aGVyKCksCiAgICAgICAgLy8gQ29va2llcwogICAgICAgIHRoaXMuJGNvb2tpZXMuc2V0KCdsYXRpdHVkZScsdGhpcy5sYXRpdHVkZSksCiAgICAgICAgdGhpcy4kY29va2llcy5zZXQoJ2xvbmdpdHVkZScsdGhpcy5sb25naXR1ZGUpCiAgICAgICAgKSkKICAgICAgLmNhdGNoKGVycm9yID0+ICgKICAgICAgICBhbGVydCgnQ2l0eSBOb3QgRm91bmQnKSwgCiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpLAogICAgICAgIHRoaXMuJGNvb2tpZXMuc2V0KCdsYXRpdHVkZScsMCksCiAgICAgICAgdGhpcy4kY29va2llcy5zZXQoJ2xvbmdpdHVkZScsMCkKICAgICAgICApKQogICAgfSwKICAgIGFzeW5jIGdldFdlYXRoZXIoKSB7CiAgICAgIC8vIEdldCBDaXR5IFdlYXRoZXIKICAgICAgYXhpb3MuZ2V0KCdodHRwOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS9vbmVjYWxsP2xvbj0nICsgdGhpcy5sb25naXR1ZGUgKyAnJmxhdD0nICsgdGhpcy5sYXRpdHVkZSArICcmYXBwaWQ9JyArIHRoaXMuYXBpS2V5KQogICAgICAudGhlbihyZXNwb25zZSA9PiAoCiAgICAgICAgdGhpcy5hbGxXZWF0aGVyID0gcmVzcG9uc2UuZGF0YQogICAgICAgICkpCiAgICAgIC5jYXRjaChlcnJvciA9PiAoYWxlcnQoJ1NvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggdGhlIEFQSScpLCBjb25zb2xlLmxvZyhlcnJvcikpKQogICAgfSwKICAgIGFzeW5jIGdldENpdHkoKSB7CiAgICAgIC8vIEdldCBDaXR5IE5hbWUKICAgICAgYXhpb3MuZ2V0KCdodHRwOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS93ZWF0aGVyP2xvbj0nICsgdGhpcy5sb25naXR1ZGUgKyAnJmxhdD0nICsgdGhpcy5sYXRpdHVkZSArJyZhcHBpZD0nICsgdGhpcy5hcGlLZXkpCiAgICAgIC50aGVuKHJlc3BvbnNlID0+ICgKICAgICAgICB0aGlzLndlYXRoZXIgPSByZXNwb25zZS5kYXRhLAogICAgICAgIHRoaXMubGF0aXR1ZGUgPSB0aGlzLndlYXRoZXJbJ2Nvb3JkJ11bJ2xhdCddLAogICAgICAgIHRoaXMubG9uZ2l0dWRlID0gdGhpcy53ZWF0aGVyWydjb29yZCddWydsb24nXSwKICAgICAgICB0aGlzLmdldFdlYXRoZXIoKQogICAgICAgICkpCiAgICAgIC5jYXRjaChlcnJvciA9PiAoYWxlcnQoJ0NpdHkgTm90IEZvdW5kJyksIGNvbnNvbGUubG9nKGVycm9yKSkpCiAgICB9LAogICAgbG9jYWxUaW1lKHRpbWVzdGFtcCkgewogICAgICB0aGlzLnRpbWVzdGFtcCA9IERhdGUodGltZXN0YW1wKQogICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXAKICAgIH0sCiAgICBsb2NhbFRpbWVIb3VyKHRpbWVzdGFtcCkgewogICAgICB0aGlzLnRpbWVzdGFtcCA9IG5ldyBEYXRlKHRpbWVzdGFtcCAqIDEwMDApCiAgICAgIHJldHVybiB0aGlzLnRpbWVzdGFtcC50b0xvY2FsZVN0cmluZygnZW4tVVMnLCB7IGhvdXI6ICdudW1lcmljJywgaG91cjEyOiB0cnVlLCBtaW51dGU6ICcyLWRpZ2l0J30pCiAgICB9LAogICAgdGVtcFRvRmFocih0ZW1wKSB7CiAgICAgIHRoaXMudGVtcCA9IHRlbXAgKiA5LzUgLSA0NTkuNjcKICAgICAgcmV0dXJuIE1hdGgucm91bmQodGhpcy50ZW1wKQogICAgfSwKICAgIHRlbXBUb0NlbCh0ZW1wKSB7CiAgICAgIHRoaXMudGVtcCA9IHRlbXAgLSAyNzMuMTUKICAgICAgcmV0dXJuIE1hdGgucm91bmQodGhpcy50ZW1wKQogICAgfSwKICB9Cn0K"},{"version":3,"sources":["CurrentWeather.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"CurrentWeather.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"current-weather-container\">\n    <div class=\"search-wrapper\">\n      <input v-model=\"searchBar\" v-on:keyup.enter=\"searchCity()\" class=\"search-input\" type=\"text\" placeholder=\"Enter City Name\">\n      <button class=\"search-button\" v-on:click=\"searchCity()\">\n        <i class=\"fa fa-search-location\"></i>\n      </button>\n    </div>\n    <div class=\"current-location-warpper\">\n      <WeatherIcon msg='currentStats'/> \n    </div>\n    <div class=\"location-warpper\">\n      <h1 class=\"city-name\">{{ this.weather['name'] }}<span>, {{ this.allWeather['timezone'] }}</span></h1>\n      <p class=\"current-timestamp\">As on {{ localTime(this.allWeather['current']['dt']) }} &nbsp;<span v-on:click=\"getCity()\"><i class=\"fa fa-redo\"></i></span></p>\n    </div>\n    <div class=\"temp-wrapper\">\n      <h1 class=\"temp\">{{ tempToFahr(this.allWeather['current']['temp']) }}°</h1>\n      <p class=\"temp-desc\">{{ this.allWeather['current']['weather'][0]['main'] }}</p>\n      <p class=\"feels\"> {{ this.weather['name'] }} Feels like : {{ tempToFahr(this.allWeather['current']['temp']) }}°</p>\n    </div>\n    <div class=\"additional-info-wrapper\">\n      <p class=\"sunriseTime\"><i class=\"wi wi-sunrise\"></i><span>{{ localTimeHour(this.allWeather['current']['sunrise']) }}</span></p>\n      <p class=\"sunsetTime\"><i class=\"wi wi-sunset\"></i><span>{{ localTimeHour(this.allWeather['current']['sunset']) }}</span></p>\n      <p class=\"celsius\"><i class=\"wi wi-thermometer\"></i><span>{{ tempToCel(this.allWeather['current']['temp']) }}</span><i class=\"wi wi-celsius\"></i></p>\n      <p class=\"fahrenheit\"><i class=\"wi wi-thermometer\"></i><span>{{ tempToFahr(this.allWeather['current']['temp']) }}</span><i class=\"wi wi-fahrenheit\"></i></p>\n    </div>\n    <div class=\"currentStats\">\n      <CurrentStats :test_msg='hi'/> \n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport WeatherIcon from './WeatherIcon.vue'\nimport CurrentStats from './CurrentStats.vue'\n\nexport default {\n  name: 'CurrentWeather',\n  data() {\n    return {\n      // Search Bar\n      searchBar: null,\n      city: null,\n      // Location Geotaging\n      location: null,\n      errorStr: null,\n      latitude: 0,\n      longitude: 0,\n      // Open Weather\n      apiKey: 'fda3e989677260a43892996b62977ea3',\n      weather: [],\n      allWeather: [],\n      timestamp: null,\n      temp: null,\n    }\n  },\n  components: {\n    WeatherIcon,\n    CurrentStats,\n  },\n  created() {\n    this.latitude = this.$cookies.get('latitude');\n    this.longitude = this.$cookies.get('longitude');\n    console.log(this.longitude)\n    if (this.longitude == 0) {\n      // Location Geotaging & Cookies\n      navigator.geolocation.getCurrentPosition(pos => {\n        this.location = pos;\n        this.latitude = this.location.coords.latitude;\n        this.longitude = this.location.coords.longitude;\n        this.getCity()\n      }, err => {\n        this.errorStr = err.message;\n      })\n    } else {\n      this.getCity()\n    }\n  },\n  methods: {\n    async searchCity() {\n      this.city = this.searchBar;\n      // Get City Coordinates\n      axios.get('http://api.openweathermap.org/data/2.5/weather?q='+ this.city +'&appid=' + this.apiKey)\n      .then(response => (\n        this.weather = response.data,\n        this.latitude = this.weather['coord']['lat'],\n        this.longitude = this.weather['coord']['lon'],\n        this.getWeather(),\n        // Cookies\n        this.$cookies.set('latitude',this.latitude),\n        this.$cookies.set('longitude',this.longitude)\n        ))\n      .catch(error => (\n        alert('City Not Found'), \n        console.log(error),\n        this.$cookies.set('latitude',0),\n        this.$cookies.set('longitude',0)\n        ))\n    },\n    async getWeather() {\n      // Get City Weather\n      axios.get('http://api.openweathermap.org/data/2.5/onecall?lon=' + this.longitude + '&lat=' + this.latitude + '&appid=' + this.apiKey)\n      .then(response => (\n        this.allWeather = response.data\n        ))\n      .catch(error => (alert('Something went wrong with the API'), console.log(error)))\n    },\n    async getCity() {\n      // Get City Name\n      axios.get('http://api.openweathermap.org/data/2.5/weather?lon=' + this.longitude + '&lat=' + this.latitude +'&appid=' + this.apiKey)\n      .then(response => (\n        this.weather = response.data,\n        this.latitude = this.weather['coord']['lat'],\n        this.longitude = this.weather['coord']['lon'],\n        this.getWeather()\n        ))\n      .catch(error => (alert('City Not Found'), console.log(error)))\n    },\n    localTime(timestamp) {\n      this.timestamp = Date(timestamp)\n      return this.timestamp\n    },\n    localTimeHour(timestamp) {\n      this.timestamp = new Date(timestamp * 1000)\n      return this.timestamp.toLocaleString('en-US', { hour: 'numeric', hour12: true, minute: '2-digit'})\n    },\n    tempToFahr(temp) {\n      this.temp = temp * 9/5 - 459.67\n      return Math.round(this.temp)\n    },\n    tempToCel(temp) {\n      this.temp = temp - 273.15\n      return Math.round(this.temp)\n    },\n  }\n}\n</script>\n\n<style scoped>\n.current-weather-container {\n  width: 100%;\n}\n\n.search-wrapper {\n  border-radius: 30px;\n  background-color: #fff;\n  padding-right: 12px;\n  height: 60px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  color: #1f2937;\n  box-shadow: 0 2px 6px 0 rgba(136,148,171,.2),0 24px 20px -24px rgba(71,82,107,.1);\n  overflow: hidden;\n  box-shadow: #4A4A4A;\n  border: 0.1px solid #D6D6D6;\n}\n\n.search-input {\n  border: none;\n  flex: 1;\n  outline: none;\n  height: 100%;\n  padding: 0 20px;\n  font-size: 16px;\n  background-color: #fff;\n  color: #1f1c2e;\n  opacity: 0.6;\n}\n\n.search-button {\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n}\n\n.search-button i {\n  font-size: 30px;\n  color: #909090;\n}\n\n.location-warpper {\n  margin-top: 80px;\n}\n\n.city-name > span {\n  font-size: 70%;\n  font-family: 'Poppins', sans-serif;\n  font-weight: 500;\n  color: #878686;\n}\n\n.current-timestamp {\n  margin-top: -15px;\n  font-family: 'Poppins', sans-serif;\n  font-weight: 500;\n  color: #878686;\n}\n\n.current-timestamp > span {\n  cursor: pointer;\n}\n\n.temp {\n  margin-top: -15px;\n  font-size: 100px;\n  color: orange;\n}\n\n.temp-desc {\n  margin-top: -80px;\n  margin-left: 10px;\n  font-family: 'Poppins', sans-serif;\n  font-weight: 500;\n  color: #878686;\n  font-size: 20px;\n}\n\n.feels {\n  margin-top: -10px;\n  margin-left: 10px;\n  font-family: 'Poppins', sans-serif;\n  font-weight: 500;\n  color: #878686;\n}\n\n\n.additional-info-wrapper {\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: 10px;\n}\n\n.sunriseTime, .sunsetTime, .fahrenheit, .celsius {\n  margin-right: 30px;\n  font-size: 20px;\n  color: #878686;\n}\n\n.sunriseTime > i, .sunsetTime > i {\n  margin-right: 20px;\n}\n\n.fahrenheit > i, .celsius > i {\n  margin-right: 20px;\n}\n\n</style>"]}]}