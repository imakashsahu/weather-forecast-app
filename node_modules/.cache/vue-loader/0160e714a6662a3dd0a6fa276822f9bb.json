{"remainingRequest":"/home/asahu/Github/weather-forecast-app/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/asahu/Github/weather-forecast-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/asahu/Github/weather-forecast-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/asahu/Github/weather-forecast-app/src/components/CurrentWeather.vue?vue&type=template&id=43f9a0eb&scoped=true&","dependencies":[{"path":"/home/asahu/Github/weather-forecast-app/src/components/CurrentWeather.vue","mtime":1635321602158},{"path":"/home/asahu/Github/weather-forecast-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/asahu/Github/weather-forecast-app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/asahu/Github/weather-forecast-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/asahu/Github/weather-forecast-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}